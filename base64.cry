/* base64 specification
 * Author: David Lazar
 *
 * Based on RFC 4648:
 * https://tools.ietf.org/html/rfc4648
 */

/* 
 * Updated for Cryptol v2 by Tyler Smith
 * See language updates here: https://github.com/GaloisInc/cryptol/blob/b74e5a67b2b79f19390475302e8d4c0616cdd2f3/docs/Version2Changes.md
 * Specifically note that Cryptol v2 is big endian by default. 
 */

////////////////////////////////////////////////////////////////////////
// base64 alphabet
////////////////////////////////////////////////////////////////////////

// 64 character ascii alphabet 
alphabet = ['A' .. 'Z'] # ['a' .. 'z'] # ['0' .. '9'] # ['+', '/']

// base64 encodes 6 bits at a time 
// binary alphabet is 256 6 bit values  - 256 to match up against ASCII alphabet
// alphabet' : [256][6];
alphabet' = (zero : [43][6]) # [62, 0, 0, 0, 63] # [52 .. 61] # (zero : [7][6]) # [0 .. 26] # (zero : [5][6]) # [26 .. 51] # zero

// Check if an input character is in the ascii alphabet
inAlphabet : [8] -> Bit
inAlphabet x = ((x >= 'A') && (x <= 'Z'))
             || ((x >= 'a') && (x <= 'z'))
             || ((x >= '0') && (x <= '9'))
             ||  (x == '+') || (x == '/')

// invertable mapping between alphabets
property alphabetLeftInv (x) = alphabet' @ (alphabet @ (x:[6])) == x
property alphabetRightInv (x) = if inAlphabet x 
  then alphabet @ (alphabet' @ x) == x
      else True

////////////////////////////////////////////////////////////////////////
// Core base64 encode and decode functions. These do not handle padding.
// I.e. these assume the inputs are sized appropriately
////////////////////////////////////////////////////////////////////////

/* Cryptol 1 version
* encode : {a c} (fin a, c == (8 * a + 5) / 6, 6 * c >= 8 * a) => [a][8] -> [c][8];
* encode xs = [| alphabet @ x || x <- groupBy(6, join xs # zero) |];
*/

// in Cryptol 2 @ is the big endian index operation
// in Cryptol 2 ! is the little endian index operation

// encode is binary --> ascii. 
// Take 6 bits of binary at a time and add an ascii character for each set of 6 bits. 
// If we have 48 bits of input, we will have 48/6 = 8 8 bit words of output (64 bits out)
encode : {a, c} (fin a, c == (8 * a + 5) / 6, 6 * c >= 8 * a) => [a][8] -> [c][8]
//encode : {a, c} (fin a, a * 4 == c * 3) => [a][8] -> [c][8]
encode xs = [ alphabet @ x | x <- groupBy`{6} (join xs # zero) ]

/* Cryptol 1 version 
 * decode : {a c} (fin a, a == (6 * c - 5) / 8 + 1, 6 * c >= 8 * a) => [c][8] -> [a][8];
 * decode xs = groupBy(8, take(`a * 8, join [| alphabet' @ x || x <- xs |]));
 */

// Take ASCII text as input (length c) and generate binary as output (length a)
//decode : {a, c} (fin a, fin c, c > 0, a == (6 * c - 5) / 8 + 1, 6 * c >= 8 * a) => [c][8] -> [a][8]
decode : {a, c} (fin a, fin c, a * 4 == c * 3) => [c][8] -> [a][8]
decode xs = groupBy`{8} (take`{front=(a * 8)} (join [ alphabet' @ x | x <- xs ] ))

// From REPL
// :prove encodeLeftInv [3][8] -> Bit
property encodeLeftInv (x) = decode (encode x) == x

// :prove encodeLELeftInv [3][8] -> Bit
//property encodeLELeftInv (x)  = decodeLE (encodeLE x) == x

// NOTE: encode is non-surjective, so it does not have a right inverse.
// Similarly, decode is non-injective: 
//     decode "//" -> [0xff]
//     decode "/w" -> [0xff]


////////////////////////////////////////////////////////////////////////
// base64 encode and decode functions that handle padding
////////////////////////////////////////////////////////////////////////


/* Cryptol 1 Version
 * b64encode : {a, r}
 *    ( fin a, fin r
 *    , r == 4 * ((a + 2) / 3)
 *    // inferred:
 *    , r >= (8 * a + 5) / 6
 *    , 6 * ((8 * a + 5) / 6) >= 8 * a
 *    ) => [a][8] -> [r][8]
 */

 /* Cryptol 1 version
  * b64encode xs = encodeLE xs # padding
  *   where 
  *    padding : {z} (fin z) => [z][8]
  *    padding = take(`z, "=" # padding)
  */ 
//encode : {a, c} (fin a, c == (8 * a + 5) / 6, 6 * c >= 8 * a) => [a][8] -> [c][8]

//r == 4 * ((a + 2) / 3), r >= (8 * a + 5) / 6, 6 * ((8 * a + 5) / 6) >= 8 * a)

// Grab 6 bits at a time, putting in one character for each six bits
// The encoded result must have a length that is a multiple of 4,
// because the lcm of 6,8 is 24, which is 4 6 bit chunks
b64encode : {a, r, pad} (fin a, fin r, fin pad, pad >= 0, pad <= 2,
(r + pad) % 4 == 0,
(5 + 8 * a) / 6 == r
) => [a][8] -> [r + pad][8]

b64encode xs = (encode xs) # padding`{pad}

//  where 
//    padding : {z} (fin z) => [z][8]
//    padding = take`{z} ['=', '='...]

padding : {z} (fin z) => [z][8]
padding = take`{z} ['=', '='...]

// The length of the decoded message 'a' depends on the value of the
// input string (in particular the number of '=' symbols padding the 
// input). Cryptol's type system is not powerful enough to express
// this dependence, so either 'pad' or 'a' must be passed explicitly:
//
// b64decode `{a=5}   "aGVsbG8=" --> "hello"
// b64decode `{pad=1} "aGVsbG8=" --> "hello" 
// 

/* Cryptol 1 version
 * b64decode : {pad, a, r} 
 *     ( fin a, fin r, fin pad
 *     , a + pad == (6 * r - 5) / 8 + 1
 *     , pad >= 0, 2 >= pad
 *     // inferred:
 *    , 6 * r >= 8 * ((6 * r - 5) / 8) + 8
 *    ) => [r][8] -> [a][8]
 */

/* Cryptol 1 version
 * b64decode xs = reverse (drop(`pad, reverse (decodeLE xs)))
 */

b64decode : {a, r, pad} (fin a, fin r, fin pad, pad >= 0, pad <= 2,
(r + pad) % 4 == 0,
(5 + 8 * a) / 6 == r
  ) => [r+pad][8] -> [a][8]

b64decode xs = take`{back=pad} (decode xs)

/* 
 * Theorem Cryptol 1 version
 * polymorphic theorem
 * b64encodeLeftInv : {a}
 *    ( fin a
 *    // inferred:
 *    , 2 >= (24*((a+2)/3)-5)/8-a+1
 *    , 6*((8*a+5)/6) >= 8*a
 *    , 4*((a+2)/3) >= (8*a+5)/6
 *    , 24*((a+2)/3) >= 8*((24*((a+2)/3)-5)/8)+8
 *    , (24*((a+2)/3)-5)/8-a+1 >= 0
 *    ) => [a][8] -> Bit
 *
 * theorem b64encodeLeftInv: {x}. b64decode (b64encode x) == x
 */

//property b64encodeLeftInv (x) = b64decode (b64encode x) == x

////////////////////////////////////////////////////////////////////////
// test cases
////////////////////////////////////////////////////////////////////////

tests = [te1, te2, te3, te4, te5, te6, te7,
         td1, td2, td3, td4, td5, td6, td7]

property testsPass = tests == ~zero

// Test vectors from RFC 4648: https://tools.ietf.org/html/rfc4648#section-10
te1 = b64encode "" == ""
te2 = b64encode "f" == "Zg=="
te3 = b64encode "fo" == "Zm8="
te4 = b64encode "foo" == "Zm9v"
te5 = b64encode "foob" == "Zm9vYg=="
te6 = b64encode "fooba" == "Zm9vYmE="
te7 = b64encode "foobar" == "Zm9vYmFy"

td1 = b64decode`{pad=0} "" == ""
td2 = b64decode`{pad=2} "Zg==" == "f"
td3 = b64decode`{pad=1} "Zm8=" == "fo"
td4 = b64decode`{pad=0} "Zm9v" == "foo"
td5 = b64decode`{pad=2} "Zm9vYg==" == "foob"
td6 = b64decode`{pad=1} "Zm9vYmE=" == "fooba"
td7 = b64decode`{pad=0} "Zm9vYmFy" == "foobar"
